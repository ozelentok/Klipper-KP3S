[gcode_macro G29]
description: Bed Leveling
gcode:
  {% set bed_temperature = params.BED_TEMP | default(60) | int %}

  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temperature}
  M118 Waiting for bed to reach {bed_temperature-5}
  TEMPERATURE_WAIT sensor=heater_bed minimum={bed_temperature-5}
  {% if printer.toolhead.homed_axes == "xy" %}
    G28 Z
  {% elif printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}
  BED_MESH_CALIBRATE

[gcode_macro START_PRINT]
gcode:
  {% set temperature = params.TEMP | default(205) | int %}
  {% set bed_temperature = params.BED_TEMP | default(60) | int %}
  {% set abl = params.ABL | default(1) | int %}
  {% set travel_speed = [120 * 60, printer.toolhead.max_velocity * 60] | min %}

  M118 Starting print
  M118 Heaters on
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temperature}
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28 X Y
    G0 X60 Y60 F{travel_speed}
    M118 Waiting for bed to reach {bed_temperature}
    TEMPERATURE_WAIT sensor=heater_bed minimum={bed_temperature}
    G28 Z
    {% if abl != 0 %}
      BED_MESH_CALIBRATE
    {% endif %}
  {% else %}
    {% if abl != 0 %}
      BED_MESH_PROFILE LOAD=default
    {% endif %}
  {% endif %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temperature}
  PURGE TEMP={temperature}
  M118 Printing object

[gcode_macro END_PRINT]
gcode:
  M118 Ending print
  TURN_OFF_HEATERS
  M118 Heaters off
  PARK E=6
  M107
  G92 E0
  BED_MESH_CLEAR
  CLEAR_PAUSE
  M118 Ended print
  UPDATE_DELAYED_GCODE ID=RESET_SDCARD_STATUS DURATION=2

[gcode_macro PURGE]
description: Purge near printed objects
gcode:
  {% set temperature = params.TEMP | default(205) | int %}
  {% set purge_height = 0.6 %}
  {% set tip_distance = 3 %}
  {% set purge_margin = 10 %}
  {% set purge_amount = 7 %}
  {% set purge_distance = 1.5 * purge_amount %}
  {% set flow_rate = 8 %}

  {% set purge_move_speed = (flow_rate / 2.4) * 60 | float %}
  {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
  {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}

  {% if cross_section < 5 %}
    {action_raise_error('extruder.max_extrude_cross_section is insufficient for purge, please set it to 5 or greater, purge skipped')}
  {% endif %}

  {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
  {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
  {% set purge_x_max = (all_points | map(attribute=0) | max | default(2)) %}
  {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
  {% set purge_y_max = (all_points | map(attribute=1) | max | default(2)) %}

  {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_distance / 2), 0] | max) %}
  {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_distance / 2), 0] | max) %}

  {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
  {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}

  M118 Purging {tip_distance + purge_amount} mm

  SAVE_GCODE_STATE NAME=PrePurge

  G92 E0
  G90
  M83
  G0 Z{purge_height} F{travel_speed}
  M118 Waiting at purge point for extruder to reach {temperature-5}
  {% if purge_y_origin > 0 %}
    G0 X{purge_x_center} Y{purge_y_origin}
    TEMPERATURE_WAIT sensor=extruder minimum={temperature-5}
    G1 E{tip_distance} F{purge_move_speed}
    G1 X{purge_x_center + purge_distance} E{purge_amount} F{purge_move_speed}
    G1 X{purge_x_center + purge_distance + 5} E-0.1 F{travel_speed}
  {% else %}
    G0 X{purge_x_origin} Y{purge_y_center}
    TEMPERATURE_WAIT sensor=extruder minimum={temperature-5}
    G1 E{tip_distance} F{purge_move_speed}
    G1 Y{purge_y_center + purge_distance} E{purge_amount} F{purge_move_speed}
    G1 Y{purge_y_center + purge_distance + 5} E-0.1 F{travel_speed}
  {% endif %}
  G92 E0

  RESTORE_GCODE_STATE NAME=PrePurge

[delayed_gcode RESET_SDCARD_STATUS]
gcode:
  SDCARD_RESET_FILE

[gcode_macro PARK]
gcode:
  {% set x = params.X | default(20) | float %}
  {% set y = params.Y | default(140) | float %}
  {% set z = params.Z | default(20) | float %}
  {% set e = params.E | default(2) | float %}

  {% set zmax = printer.toolhead.axis_maximum.z | float %}
  {% set zpos = printer.toolhead.position.z | float %}
  {% set z = [zpos+z, zmax] | min %}

  G90
  {% if printer.extruder.can_extrude == 1 %}
    M83
    G1 E-{e} F600
    G92 E0
  {% endif %}
  G0 X{x} Y{y} Z{z} F3600

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  {% set x = params.X | default(20) | float %}
  {% set y = params.Y | default(140) | float %}
  {% set z = params.Z | default(20) | float %}
  {% set e = params.E | default(2) | float %}

  SAVE_GCODE_STATE NAME=Pause
  BASE_PAUSE
  PARK X={x} Y={y} Z={z} E={e}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  {% set e = params.E | default(2) | float %}
  G90
  {% if printer.extruder.can_extrude == 1 %}
    M83
    G1 E{e} F200
    G92 E0
  {% endif %}
  RESTORE_GCODE_STATE NAME=Pause MOVE=1
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  END_PRINT
  BASE_CANCEL_PRINT

[gcode_macro M600]
description: Filament change
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    M118 Homing
    G28
  {% endif %}
  {% if printer.extruder.can_extrude == 0 %}
    M118 Heating hotend
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=190
    TEMPERATURE_WAIT sensor=extruder minimum=180
  {% endif %}
  {% if printer.pause_resume.is_paused == 0 %}
    PAUSE
  {% endif %}
  M118 First UNLOAD, then LOAD new and RESUME when ready

[gcode_macro FILAMENT_UNLOAD]
description: Unload filament
gcode:
  {% if printer.extruder.can_extrude == 1 %}
    M83
    G1 E5   F300
    G1 E-90 F1800
  {% else %}
    RESPOND TYPE=error MSG="Hotend below minimum temperature"
  {% endif %}

[gcode_macro FILAMENT_LOAD]
description: Load filament
gcode:
  {% if printer.extruder.can_extrude == 1 %}
    M83
    G1 E40 F300
    G1 E30 F180
  {% else %}
    RESPOND TYPE=error MSG="Hotend below minimum temperature"
  {% endif %}

[gcode_macro DUMP_VARIABLES]
gcode:
  {% set filter_name = params.NAME | default('') | string | lower %}
  {% set filter_value = params.VALUE | default('') | string | lower %}
  {% set show_cfg = params.SHOW_CFG | default(0) | int %}

  {% set out = [] %}

  {% for key1 in printer %}
    {% for key2 in printer[key1] %}
      {% if (show_cfg or not (key1 | lower == 'configfile' and key2 | lower in ['config', 'settings'])) and (filter_name in key1 | lower or filter_name in key2 | lower) and filter_value in printer[key1][key2] | string | lower %}
        {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
      {% endif %}
  {% else %}
      {% if filter_name in key1 | lower and filter_value in printer[key1] | string | lower %}
        {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}

  {action_respond_info(out | join('\n'))}

[gcode_macro LOAD_BED_MESH]
gcode:
  BED_MESH_PROFILE LOAD=default

[gcode_macro CLEAR_BED_MESH]
gcode:
  BED_MESH_CLEAR

[gcode_macro SET_IS_RATIO]
gcode:
  {% set RATIO = params.RATIO|default(0.1) %}
  SET_INPUT_SHAPER DAMPING_RATIO_X={RATIO}
  SET_INPUT_SHAPER DAMPING_RATIO_Y={RATIO}

[gcode_macro SET_TMC_FIELDS]
gcode:
  {% set steppers = params.STEPPERS|default('stepper_x,stepper_y') %}
  {% for stepper in steppers.split(',') %}
    {% if stepper != '' %}
      SET_TMC_FIELD STEPPER={stepper} FIELD={params.FIELD} VALUE={params.VALUE|int}
    {% endif %}
  {% endfor %}
